{"ast":null,"code":"import { InternalStorage } from '../../storage/storage.swaps';\nimport { SDKToken } from '../../models/BaseModels';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../storage/storage.swaps\";\n/**\n* @author Jonathan Casarrubias <twitter:@johncasarrubias> <github:@mean-expert-official>\n* @module SocketConnection\n* @license MIT\n* @description\n* This module handle socket connections and return singleton instances for each\n* connection, it will use the SDK Socket Driver Available currently supporting\n* Angular 2 for web, NativeScript 2 and Angular Universal.\n**/\nexport let LoopBackAuth = /*#__PURE__*/(() => {\n  class LoopBackAuth {\n    storage;\n    /**\n     * @type {SDKToken}\n     **/\n    token = new SDKToken();\n    /**\n     * @type {string}\n     **/\n    prefix = '$LoopBackSDK$';\n    /**\n     * @method constructor\n     * @param {InternalStorage} storage Internal Storage Driver\n     * @description\n     * The constructor will initialize the token loading data from storage\n     **/\n    constructor(storage) {\n      this.storage = storage;\n      this.token.id = this.load('id');\n      this.token.user = this.load('user');\n      this.token.userId = this.load('userId');\n      this.token.created = this.load('created');\n      this.token.ttl = this.load('ttl');\n      this.token.rememberMe = this.load('rememberMe');\n    }\n    /**\n     * @method setRememberMe\n     * @param {boolean} value Flag to remember credentials\n     * @return {void}\n     * @description\n     * This method will set a flag in order to remember the current credentials\n     **/\n    setRememberMe(value) {\n      this.token.rememberMe = value;\n    }\n    /**\n     * @method setUser\n     * @param {any} user Any type of user model\n     * @return {void}\n     * @description\n     * This method will update the user information and persist it if the\n     * rememberMe flag is set.\n     **/\n    setUser(user) {\n      this.token.user = user;\n      this.save();\n    }\n    /**\n     * @method setToken\n     * @param {SDKToken} token SDKToken or casted AccessToken instance\n     * @return {void}\n     * @description\n     * This method will set a flag in order to remember the current credentials\n     **/\n    setToken(token) {\n      this.token = Object.assign({}, this.token, token);\n      this.save();\n    }\n    /**\n     * @method getToken\n     * @return {void}\n     * @description\n     * This method will set a flag in order to remember the current credentials.\n     **/\n    getToken() {\n      return this.token;\n    }\n    /**\n     * @method getAccessTokenId\n     * @return {string}\n     * @description\n     * This method will return the actual token string, not the object instance.\n     **/\n    getAccessTokenId() {\n      return this.token.id;\n    }\n    /**\n     * @method getCurrentUserId\n     * @return {any}\n     * @description\n     * This method will return the current user id, it can be number or string.\n     **/\n    getCurrentUserId() {\n      return this.token.userId;\n    }\n    /**\n     * @method getCurrentUserData\n     * @return {any}\n     * @description\n     * This method will return the current user instance.\n     **/\n    getCurrentUserData() {\n      return typeof this.token.user === 'string' ? JSON.parse(this.token.user) : this.token.user;\n    }\n    /**\n     * @method save\n     * @return {boolean} Whether or not the information was saved\n     * @description\n     * This method will save in either local storage or cookies the current credentials.\n     * But only if rememberMe is enabled.\n     **/\n    save() {\n      let today = new Date();\n      let expires = new Date(today.getTime() + this.token.ttl * 1000);\n      this.persist('id', this.token.id, expires);\n      this.persist('user', this.token.user, expires);\n      this.persist('userId', this.token.userId, expires);\n      this.persist('created', this.token.created, expires);\n      this.persist('ttl', this.token.ttl, expires);\n      this.persist('rememberMe', this.token.rememberMe, expires);\n      return true;\n    }\n    /**\n     * @method load\n     * @param {string} prop Property name\n     * @return {any} Any information persisted in storage\n     * @description\n     * This method will load either from local storage or cookies the provided property.\n     **/\n    load(prop) {\n      return this.storage.get(`${this.prefix}${prop}`);\n    }\n    /**\n     * @method clear\n     * @return {void}\n     * @description\n     * This method will clear cookies or the local storage.\n     **/\n    clear() {\n      Object.keys(this.token).forEach(prop => this.storage.remove(`${this.prefix}${prop}`));\n      this.token = new SDKToken();\n    }\n    /**\n     * @method persist\n     * @return {void}\n     * @description\n     * This method saves values to storage\n     **/\n    persist(prop, value, expires) {\n      try {\n        this.storage.set(`${this.prefix}${prop}`, typeof value === 'object' ? JSON.stringify(value) : value, this.token.rememberMe ? expires : null);\n      } catch (err) {\n        console.error('Cannot access local/session storage:', err);\n      }\n    }\n    static ɵfac = function LoopBackAuth_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || LoopBackAuth)(i0.ɵɵinject(InternalStorage));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LoopBackAuth,\n      factory: LoopBackAuth.ɵfac\n    });\n  }\n  return LoopBackAuth;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}