{"ast":null,"code":"import { SDKModels } from \"./SDKModels\";\nimport { BaseLoopBackApi } from \"../core/base.service\";\nimport { LoopBackConfig } from \"../../lb.config\";\nimport { LoopBackAuth } from \"../core/auth.service\";\nimport { LoopBackFilter, AccessToken } from \"../../models/BaseModels\";\nimport { ErrorHandler } from \"../core/error.service\";\nimport { HttpClient } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./SDKModels\";\nimport * as i3 from \"../core/auth.service\";\nimport * as i4 from \"../core/error.service\";\n/**\n * Api services for the `User` model.\n */\nexport let UserApi = /*#__PURE__*/(() => {\n  class UserApi extends BaseLoopBackApi {\n    http;\n    models;\n    auth;\n    errorHandler;\n    constructor(http, models, auth, errorHandler) {\n      super(http, models, auth, errorHandler);\n      this.http = http;\n      this.models = models;\n      this.auth = auth;\n      this.errorHandler = errorHandler;\n    }\n    /**\n     * Find a related item by id for accessTokens.\n     *\n     * @param {any} id User id\n     *\n     * @param {any} fk Foreign key for accessTokens\n     *\n     * @returns {object} An empty reference that will be\n     *   populated with the actual data once the response is returned\n     *   from the server.\n     *\n     * <em>\n     * (The remote method definition does not provide any description.\n     * This usually means the response is a `User` object.)\n     * </em>\n     */\n    findByIdAccessTokens(id, fk, customHeaders) {\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens/:fk\";\n      let _routeParams = {\n        id: id,\n        fk: fk\n      };\n      let _postBody = {};\n      let _urlParams = {};\n      let result = this.request(\"GET\", _url, _routeParams, _urlParams, _postBody, customHeaders);\n      return result;\n    }\n    /**\n     * Delete a related item by id for accessTokens.\n     *\n     * @param {any} id User id\n     *\n     * @param {any} fk Foreign key for accessTokens\n     *\n     * @returns {object} An empty reference that will be\n     *   populated with the actual data once the response is returned\n     *   from the server.\n     *\n     * This method returns no data.\n     */\n    destroyByIdAccessTokens(id, fk, customHeaders) {\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens/:fk\";\n      let _routeParams = {\n        id: id,\n        fk: fk\n      };\n      let _postBody = {};\n      let _urlParams = {};\n      let result = this.request(\"DELETE\", _url, _routeParams, _urlParams, _postBody, customHeaders);\n      return result;\n    }\n    /**\n     * Update a related item by id for accessTokens.\n     *\n     * @param {any} id User id\n     *\n     * @param {any} fk Foreign key for accessTokens\n     *\n     * @param {object} data Request data.\n     *\n     * This method expects a subset of model properties as request parameters.\n     *\n     * @returns {object} An empty reference that will be\n     *   populated with the actual data once the response is returned\n     *   from the server.\n     *\n     * <em>\n     * (The remote method definition does not provide any description.\n     * This usually means the response is a `User` object.)\n     * </em>\n     */\n    updateByIdAccessTokens(id, fk, data = {}, customHeaders) {\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens/:fk\";\n      let _routeParams = {\n        id: id,\n        fk: fk\n      };\n      let _postBody = {\n        data: data\n      };\n      let _urlParams = {};\n      let result = this.request(\"PUT\", _url, _routeParams, _urlParams, _postBody, customHeaders);\n      return result;\n    }\n    /**\n     * Queries accessTokens of User.\n     *\n     * @param {any} id User id\n     *\n     * @param {object} filter\n     *\n     * @returns {object[]} An empty reference that will be\n     *   populated with the actual data once the response is returned\n     *   from the server.\n     *\n     * <em>\n     * (The remote method definition does not provide any description.\n     * This usually means the response is a `User` object.)\n     * </em>\n     */\n    getAccessTokens(id, filter = {}, customHeaders) {\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens\";\n      let _routeParams = {\n        id: id\n      };\n      let _postBody = {};\n      let _urlParams = {};\n      if (typeof filter !== \"undefined\" && filter !== null) _urlParams.filter = filter;\n      let result = this.request(\"GET\", _url, _routeParams, _urlParams, _postBody, customHeaders);\n      return result;\n    }\n    /**\n     * Creates a new instance in accessTokens of this model.\n     *\n     * @param {any} id User id\n     *\n     * @param {object} data Request data.\n     *\n     * This method expects a subset of model properties as request parameters.\n     *\n     * @returns {object} An empty reference that will be\n     *   populated with the actual data once the response is returned\n     *   from the server.\n     *\n     * <em>\n     * (The remote method definition does not provide any description.\n     * This usually means the response is a `User` object.)\n     * </em>\n     */\n    createAccessTokens(id, data = {}, customHeaders) {\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens\";\n      let _routeParams = {\n        id: id\n      };\n      let _postBody = {\n        data: data\n      };\n      let _urlParams = {};\n      let result = this.request(\"POST\", _url, _routeParams, _urlParams, _postBody, customHeaders);\n      return result;\n    }\n    /**\n     * Deletes all accessTokens of this model.\n     *\n     * @param {any} id User id\n     *\n     * @returns {object} An empty reference that will be\n     *   populated with the actual data once the response is returned\n     *   from the server.\n     *\n     * This method returns no data.\n     */\n    deleteAccessTokens(id, customHeaders) {\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens\";\n      let _routeParams = {\n        id: id\n      };\n      let _postBody = {};\n      let _urlParams = {};\n      let result = this.request(\"DELETE\", _url, _routeParams, _urlParams, _postBody, customHeaders);\n      return result;\n    }\n    /**\n     * Counts accessTokens of User.\n     *\n     * @param {any} id User id\n     *\n     * @param {object} where Criteria to match model instances\n     *\n     * @returns {object} An empty reference that will be\n     *   populated with the actual data once the response is returned\n     *   from the server.\n     *\n     * Data properties:\n     *\n     *  - `count` – `{number}` -\n     */\n    countAccessTokens(id, where = {}, customHeaders) {\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens/count\";\n      let _routeParams = {\n        id: id\n      };\n      let _postBody = {};\n      let _urlParams = {};\n      if (typeof where !== \"undefined\" && where !== null) _urlParams.where = where;\n      let result = this.request(\"GET\", _url, _routeParams, _urlParams, _postBody, customHeaders);\n      return result;\n    }\n    /**\n     * Patch an existing model instance or insert a new one into the data source.\n     *\n     * @param {object} data Request data.\n     *\n     *  - `data` – `{object}` - Model instance data\n     *\n     * @returns {object} An empty reference that will be\n     *   populated with the actual data once the response is returned\n     *   from the server.\n     *\n     * <em>\n     * (The remote method definition does not provide any description.\n     * This usually means the response is a `User` object.)\n     * </em>\n     */\n    patchOrCreate(data = {}, customHeaders) {\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users\";\n      let _routeParams = {};\n      let _postBody = {\n        data: data\n      };\n      let _urlParams = {};\n      let result = this.request(\"PATCH\", _url, _routeParams, _urlParams, _postBody, customHeaders);\n      return result;\n    }\n    /**\n     * Patch attributes for a model instance and persist it into the data source.\n     *\n     * @param {any} id User id\n     *\n     * @param {object} data Request data.\n     *\n     *  - `data` – `{object}` - An object of model property name/value pairs\n     *\n     * @returns {object} An empty reference that will be\n     *   populated with the actual data once the response is returned\n     *   from the server.\n     *\n     * <em>\n     * (The remote method definition does not provide any description.\n     * This usually means the response is a `User` object.)\n     * </em>\n     */\n    patchAttributes(id, data = {}, customHeaders) {\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id\";\n      let _routeParams = {\n        id: id\n      };\n      let _postBody = {\n        data: data\n      };\n      let _urlParams = {};\n      let result = this.request(\"PATCH\", _url, _routeParams, _urlParams, _postBody, customHeaders);\n      return result;\n    }\n    /**\n     * Login a user with username/email and password.\n     *\n     * @param {string} include Related objects to include in the response. See the description of return value for more details.\n     *   Default value: `user`.\n     *\n     *  - `rememberMe` - `boolean` - Whether the authentication credentials\n     *     should be remembered in localStorage across app/browser restarts.\n     *     Default: `true`.\n     *\n     * @param {object} data Request data.\n     *\n     * This method expects a subset of model properties as request parameters.\n     *\n     * @returns {object} An empty reference that will be\n     *   populated with the actual data once the response is returned\n     *   from the server.\n     *\n     * The response body contains properties of the AccessToken created on login.\n     * Depending on the value of `include` parameter, the body may contain additional properties:\n     *\n     *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)\n     *\n     *\n     */\n    login(credentials, include = \"user\", rememberMe = true, customHeaders) {\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/login\";\n      let _routeParams = {};\n      let _postBody = {\n        credentials: credentials\n      };\n      let _urlParams = {};\n      if (typeof include !== \"undefined\" && include !== null) _urlParams.include = include;\n      let result = this.request(\"POST\", _url, _routeParams, _urlParams, _postBody, customHeaders).pipe(response => {\n        response.ttl = parseInt(response.ttl);\n        response.rememberMe = rememberMe;\n        this.auth.setToken(response);\n        return response;\n      });\n      return result;\n    }\n    /**\n     * Logout a user with access token.\n     *\n     * @param {object} data Request data.\n     *\n     * This method does not accept any data. Supply an empty object.\n     *\n     * @returns {object} An empty reference that will be\n     *   populated with the actual data once the response is returned\n     *   from the server.\n     *\n     * This method returns no data.\n     */\n    logout(customHeaders) {\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/logout\";\n      let _routeParams = {};\n      let _postBody = {};\n      let _urlParams = {};\n      _urlParams.access_token = this.auth.getAccessTokenId();\n      this.auth.clear();\n      let result = this.request(\"POST\", _url, _routeParams, _urlParams, _postBody, customHeaders);\n      return result;\n    }\n    /**\n     * Trigger user's identity verification with configured verifyOptions\n     *\n     * @param {any} id User id\n     *\n     * @param {object} data Request data.\n     *\n     * This method does not accept any data. Supply an empty object.\n     *\n     * @returns {object} An empty reference that will be\n     *   populated with the actual data once the response is returned\n     *   from the server.\n     *\n     * This method returns no data.\n     */\n    verify(id, customHeaders) {\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/verify\";\n      let _routeParams = {\n        id: id\n      };\n      let _postBody = {};\n      let _urlParams = {};\n      let result = this.request(\"POST\", _url, _routeParams, _urlParams, _postBody, customHeaders);\n      return result;\n    }\n    /**\n     * Confirm a user registration with identity verification token.\n     *\n     * @param {string} uid\n     *\n     * @param {string} token\n     *\n     * @param {string} redirect\n     *\n     * @returns {object} An empty reference that will be\n     *   populated with the actual data once the response is returned\n     *   from the server.\n     *\n     * This method returns no data.\n     */\n    confirm(uid, token, redirect = {}, customHeaders) {\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/confirm\";\n      let _routeParams = {};\n      let _postBody = {};\n      let _urlParams = {};\n      if (typeof uid !== \"undefined\" && uid !== null) _urlParams.uid = uid;\n      if (typeof token !== \"undefined\" && token !== null) _urlParams.token = token;\n      if (typeof redirect !== \"undefined\" && redirect !== null) _urlParams.redirect = redirect;\n      let result = this.request(\"GET\", _url, _routeParams, _urlParams, _postBody, customHeaders);\n      return result;\n    }\n    /**\n     * Reset password for a user with email.\n     *\n     * @param {object} data Request data.\n     *\n     * This method expects a subset of model properties as request parameters.\n     *\n     * @returns {object} An empty reference that will be\n     *   populated with the actual data once the response is returned\n     *   from the server.\n     *\n     * This method returns no data.\n     */\n    resetPassword(options, customHeaders) {\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/reset\";\n      let _routeParams = {};\n      let _postBody = {\n        options: options\n      };\n      let _urlParams = {};\n      let result = this.request(\"POST\", _url, _routeParams, _urlParams, _postBody, customHeaders);\n      return result;\n    }\n    /**\n     * Change a user's password.\n     *\n     * @param {object} data Request data.\n     *\n     *  - `oldPassword` – `{string}` -\n     *\n     *  - `newPassword` – `{string}` -\n     *\n     * @returns {object} An empty reference that will be\n     *   populated with the actual data once the response is returned\n     *   from the server.\n     *\n     * This method returns no data.\n     */\n    changePassword(oldPassword, newPassword, customHeaders) {\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/change-password\";\n      let _routeParams = {};\n      let _postBody = {\n        data: {\n          oldPassword: oldPassword,\n          newPassword: newPassword\n        }\n      };\n      let _urlParams = {};\n      let result = this.request(\"POST\", _url, _routeParams, _urlParams, _postBody, customHeaders);\n      return result;\n    }\n    /**\n     * Reset user's password via a password-reset token.\n     *\n     * @param {object} data Request data.\n     *\n     *  - `newPassword` – `{string}` -\n     *\n     * @returns {object} An empty reference that will be\n     *   populated with the actual data once the response is returned\n     *   from the server.\n     *\n     * This method returns no data.\n     */\n    setPassword(newPassword, customHeaders) {\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/reset-password\";\n      let _routeParams = {};\n      let _postBody = {\n        data: {\n          newPassword: newPassword\n        }\n      };\n      let _urlParams = {};\n      let result = this.request(\"POST\", _url, _routeParams, _urlParams, _postBody, customHeaders);\n      return result;\n    }\n    /**\n     * Creates a new instance in accessTokens of this model.\n     *\n     * @param {any} id User id\n     *\n     * @param {object} data Request data.\n     *\n     * This method expects a subset of model properties as request parameters.\n     *\n     * @returns {object[]} An empty reference that will be\n     *   populated with the actual data once the response is returned\n     *   from the server.\n     *\n     * <em>\n     * (The remote method definition does not provide any description.\n     * This usually means the response is a `User` object.)\n     * </em>\n     */\n    createManyAccessTokens(id, data = [], customHeaders) {\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens\";\n      let _routeParams = {\n        id: id\n      };\n      let _postBody = {\n        data: data\n      };\n      let _urlParams = {};\n      let result = this.request(\"POST\", _url, _routeParams, _urlParams, _postBody, customHeaders);\n      return result;\n    }\n    /**\n     * @ngdoc method\n     * @name sdk.User#getCurrent\n     * @methodOf sdk.User\n     *\n     * @description\n     *\n     * Get data of the currently logged user. Fail with HTTP result 401\n     * when there is no user logged in.\n     *\n     * @returns object An empty reference that will be\n     *   populated with the actual data once the response is returned\n     *   from the server.\n     */\n    getCurrent(filter = {}) {\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users\" + \"/:id\";\n      let id = this.auth.getCurrentUserId();\n      if (id == null) id = \"__anonymous__\";\n      let _routeParams = {\n        id: id\n      };\n      let _urlParams = {};\n      let _postBody = {};\n      if (filter) _urlParams.filter = filter;\n      return this.request(\"GET\", _url, _routeParams, _urlParams, _postBody);\n    }\n    /**\n     * Get data of the currently logged user that was returned by the last\n     * call to {@link sdk.User#login} or\n     * {@link sdk.User#getCurrent}. Return null when there\n     * is no user logged in or the data of the current user were not fetched\n     * yet.\n     *\n     * @returns object An Account instance.\n     */\n    getCachedCurrent() {\n      return this.auth.getCurrentUserData();\n    }\n    /**\n     * Get data of the currently logged access tokern that was returned by the last\n     * call to {@link sdk.User#login}\n     *\n     * @returns object An AccessToken instance.\n     */\n    getCurrentToken() {\n      return this.auth.getToken();\n    }\n    /**\n     * @name sdk.User#isAuthenticated\n     *\n     * @returns {boolean} True if the current user is authenticated (logged in).\n     */\n    isAuthenticated() {\n      return !(this.getCurrentId() === \"\" || this.getCurrentId() == null || this.getCurrentId() == \"null\");\n    }\n    /**\n     * @name sdk.User#getCurrentId\n     *\n     * @returns object Id of the currently logged-in user or null.\n     */\n    getCurrentId() {\n      return this.auth.getCurrentUserId();\n    }\n    /**\n     * The name of the model represented by this $resource,\n     * i.e. `User`.\n     */\n    getModelName() {\n      return \"User\";\n    }\n    static ɵfac = function UserApi_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || UserApi)(i0.ɵɵinject(HttpClient), i0.ɵɵinject(SDKModels), i0.ɵɵinject(LoopBackAuth), i0.ɵɵinject(ErrorHandler, 8));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserApi,\n      factory: UserApi.ɵfac\n    });\n  }\n  return UserApi;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}