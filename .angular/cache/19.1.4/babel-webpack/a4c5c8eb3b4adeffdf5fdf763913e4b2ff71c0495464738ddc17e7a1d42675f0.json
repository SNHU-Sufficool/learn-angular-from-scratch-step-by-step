{"ast":null,"code":"import { QuestionApi, Question } from \"../../../sdk\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../sdk\";\nexport let QuestionsService = /*#__PURE__*/(() => {\n  class QuestionsService {\n    questionApi;\n    constructor(questionApi) {\n      this.questionApi = questionApi;\n    }\n    getQuestions() {\n      let filter = {\n        include: {\n          relation: \"answers\"\n        }\n      };\n      return this.questionApi.find(filter).toPromise();\n    }\n    getQuestion(questionId) {\n      let query = {\n        id: questionId\n      };\n      return this.questionApi.find({\n        where: query\n      }).toPromise();\n    }\n    getQuestionsByCategory(category_slug) {\n      let filter = {\n        include: {\n          relation: \"answers\"\n        },\n        where: {\n          categorySlug: category_slug\n        }\n      };\n      return this.questionApi.find(filter);\n    }\n    getQuestionBySlug(slug) {\n      let filter = {\n        include: {\n          relation: \"answers\"\n        },\n        where: {\n          questionSlug: slug\n        }\n      };\n      return this.questionApi.findOne(filter);\n    }\n    deleteQuestion(questionId) {\n      return this.questionApi.deleteById(questionId);\n    }\n    updateQuestion(question) {\n      return this.questionApi.updateAttributes(question.id, question);\n    }\n    createQuestion(values) {\n      let data = new Question();\n      data.question = values.question;\n      data.questionSlug = values.questionSlug;\n      data.categorySlug = values.categorySlug;\n      return this.questionApi.create(data);\n    }\n    static ɵfac = function QuestionsService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || QuestionsService)(i0.ɵɵinject(i1.QuestionApi));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: QuestionsService,\n      factory: QuestionsService.ɵfac\n    });\n  }\n  return QuestionsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}