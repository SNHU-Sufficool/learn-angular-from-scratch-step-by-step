{"ast":null,"code":"import { SDKModels } from \"./SDKModels\";\nimport { BaseLoopBackApi } from \"../core/base.service\";\nimport { LoopBackConfig } from \"../../lb.config\";\nimport { LoopBackAuth } from \"../core/auth.service\";\nimport { JSONSearchParams } from \"../core/search.params\";\nimport { ErrorHandler } from \"../core/error.service\";\nimport { HttpClient } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./SDKModels\";\nimport * as i3 from \"../core/auth.service\";\nimport * as i4 from \"../core/error.service\";\n/**\n * Api services for the `Answer` model.\n */\nexport let AnswerApi = /*#__PURE__*/(() => {\n  class AnswerApi extends BaseLoopBackApi {\n    http;\n    models;\n    auth;\n    searchParams;\n    errorHandler;\n    constructor(http, models, auth, searchParams, errorHandler) {\n      super(http, models, auth, searchParams, errorHandler);\n      this.http = http;\n      this.models = models;\n      this.auth = auth;\n      this.searchParams = searchParams;\n      this.errorHandler = errorHandler;\n    }\n    /**\n     * Fetches belongsTo relation question.\n     *\n     * @param {any} id answer id\n     *\n     * @param {boolean} refresh\n     *\n     * @returns {object} An empty reference that will be\n     *   populated with the actual data once the response is returned\n     *   from the server.\n     *\n     * <em>\n     * (The remote method definition does not provide any description.\n     * This usually means the response is a `Answer` object.)\n     * </em>\n     */\n    getQuestion(id, refresh = {}, customHeaders) {\n      let _method = \"GET\";\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/answers/:id/question\";\n      let _routeParams = {\n        id: id\n      };\n      let _postBody = {};\n      let _urlParams = {};\n      if (typeof refresh !== \"undefined\" && refresh !== null) _urlParams.refresh = refresh;\n      let result = this.request(\"GET\", _url, _routeParams, _urlParams, _postBody, customHeaders);\n      return result;\n    }\n    /**\n     * Patch an existing model instance or insert a new one into the data source.\n     *\n     * @param {object} data Request data.\n     *\n     *  - `data` – `{object}` - Model instance data\n     *\n     * @returns {object} An empty reference that will be\n     *   populated with the actual data once the response is returned\n     *   from the server.\n     *\n     * <em>\n     * (The remote method definition does not provide any description.\n     * This usually means the response is a `Answer` object.)\n     * </em>\n     */\n    patchOrCreate(data = {}, customHeaders) {\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/answers\";\n      let _routeParams = {};\n      let _postBody = {\n        data: data\n      };\n      let _urlParams = {};\n      let result = this.request(\"PATCH\", _url, _routeParams, _urlParams, _postBody, customHeaders);\n      return result;\n    }\n    /**\n     * Patch attributes for a model instance and persist it into the data source.\n     *\n     * @param {any} id answer id\n     *\n     * @param {object} data Request data.\n     *\n     *  - `data` – `{object}` - An object of model property name/value pairs\n     *\n     * @returns {object} An empty reference that will be\n     *   populated with the actual data once the response is returned\n     *   from the server.\n     *\n     * <em>\n     * (The remote method definition does not provide any description.\n     * This usually means the response is a `Answer` object.)\n     * </em>\n     */\n    patchAttributes(id, data = {}, customHeaders) {\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/answers/:id\";\n      let _routeParams = {\n        id: id\n      };\n      let _postBody = {\n        data: data\n      };\n      let _urlParams = {};\n      let result = this.request(\"PATCH\", _url, _routeParams, _urlParams, _postBody, customHeaders);\n      return result;\n    }\n    /**\n     * The name of the model represented by this $resource,\n     * i.e. `Answer`.\n     */\n    getModelName() {\n      return \"Answer\";\n    }\n    static ɵfac = function AnswerApi_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AnswerApi)(i0.ɵɵinject(HttpClient), i0.ɵɵinject(SDKModels), i0.ɵɵinject(LoopBackAuth), i0.ɵɵinject(JSONSearchParams), i0.ɵɵinject(ErrorHandler, 8));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AnswerApi,\n      factory: AnswerApi.ɵfac\n    });\n  }\n  return AnswerApi;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}