{"ast":null,"code":"import * as i0 from \"@angular/core\";\n/**\n* @author Jonathan Casarrubias <twitter:@johncasarrubias> <github:@mean-expert-official>\n* @module CookieBrowser\n* @license MIT\n* @description\n* This module handle cookies, it will be provided using DI Swapping according the\n* SDK Socket Driver Available currently supporting Angular 2 for web and NativeScript 2.\n**/\nexport let CookieBrowser = /*#__PURE__*/(() => {\n  class CookieBrowser {\n    /**\n     * @type {CookieInterface}\n     **/\n    cookies = {};\n    /**\n     * @method get\n     * @param {string} key Cookie key name\n     * @return {any}\n     * @description\n     * The getter will return any type of data persisted in cookies.\n     **/\n    get(key) {\n      if (!this.cookies[key]) {\n        let cookie = window.document.cookie.split('; ').filter(item => item.split('=')[0] === key).pop();\n        if (!cookie) {\n          return null;\n        }\n        this.cookies[key] = this.parse(cookie.split('=').slice(1).join('='));\n      }\n      return this.cookies[key];\n    }\n    /**\n     * @method set\n     * @param {string} key Cookie key name\n     * @param {any} value Any value\n     * @param {Date=} expires The date of expiration (Optional)\n     * @return {void}\n     * @description\n     * The setter will return any type of data persisted in cookies.\n     **/\n    set(key, value, expires) {\n      this.cookies[key] = value;\n      let cookie = `${key}=${value}; path=/${expires ? `; expires=${expires.toUTCString()}` : ''}`;\n      window.document.cookie = cookie;\n    }\n    /**\n     * @method remove\n     * @param {string} key Cookie key name\n     * @return {void}\n     * @description\n     * This method will remove a cookie from the client.\n     **/\n    remove(key) {\n      document.cookie = key + '=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n      delete this.cookies[key];\n    }\n    /**\n     * @method parse\n     * @param {any} value Input data expected to be JSON\n     * @return {void}\n     * @description\n     * This method will parse the string as JSON if possible, otherwise will\n     * return the value itself.\n     **/\n    parse(value) {\n      try {\n        return JSON.parse(value);\n      } catch (e) {\n        return value;\n      }\n    }\n    static ɵfac = function CookieBrowser_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CookieBrowser)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CookieBrowser,\n      factory: CookieBrowser.ɵfac\n    });\n  }\n  return CookieBrowser;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}