{"ast":null,"code":"import { Observable } from 'rxjs/Observable';\n//import { ErrorObservable } from 'rxjs/observable/ErrorObservable';\nimport 'rxjs/add/observable/throw';\nimport * as i0 from \"@angular/core\";\n/**\n * Default error handler\n */\nexport let ErrorHandler = /*#__PURE__*/(() => {\n  class ErrorHandler {\n    // ErrorObservable when rxjs version < rc.5\n    // ErrorObservable<string> when rxjs version = rc.5\n    // I'm leaving any for now to avoid breaking apps using both versions\n    handleError(error) {\n      return Observable.throw(error.json().error || 'Server error');\n    }\n    static ɵfac = function ErrorHandler_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ErrorHandler)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ErrorHandler,\n      factory: ErrorHandler.ɵfac\n    });\n  }\n  return ErrorHandler;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}